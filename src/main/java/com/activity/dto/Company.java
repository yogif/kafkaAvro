/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.activity.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Company extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4659893902106329115L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Company\",\"namespace\":\"com.activity.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"companyName\",\"type\":\"string\"},{\"name\":\"companyType\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"statusCompany\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Company> ENCODER =
      new BinaryMessageEncoder<Company>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Company> DECODER =
      new BinaryMessageDecoder<Company>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Company> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Company> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Company>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Company to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Company from a ByteBuffer. */
  public static Company fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence companyName;
  @Deprecated public java.lang.CharSequence companyType;
  @Deprecated public java.lang.CharSequence address;
  @Deprecated public java.lang.CharSequence statusCompany;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Company() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param companyName The new value for companyName
   * @param companyType The new value for companyType
   * @param address The new value for address
   * @param statusCompany The new value for statusCompany
   */
  public Company(java.lang.CharSequence id, java.lang.CharSequence companyName, java.lang.CharSequence companyType, java.lang.CharSequence address, java.lang.CharSequence statusCompany) {
    this.id = id;
    this.companyName = companyName;
    this.companyType = companyType;
    this.address = address;
    this.statusCompany = statusCompany;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return companyName;
    case 2: return companyType;
    case 3: return address;
    case 4: return statusCompany;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: companyName = (java.lang.CharSequence)value$; break;
    case 2: companyType = (java.lang.CharSequence)value$; break;
    case 3: address = (java.lang.CharSequence)value$; break;
    case 4: statusCompany = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'companyName' field.
   * @return The value of the 'companyName' field.
   */
  public java.lang.CharSequence getCompanyName() {
    return companyName;
  }

  /**
   * Sets the value of the 'companyName' field.
   * @param value the value to set.
   */
  public void setCompanyName(java.lang.CharSequence value) {
    this.companyName = value;
  }

  /**
   * Gets the value of the 'companyType' field.
   * @return The value of the 'companyType' field.
   */
  public java.lang.CharSequence getCompanyType() {
    return companyType;
  }

  /**
   * Sets the value of the 'companyType' field.
   * @param value the value to set.
   */
  public void setCompanyType(java.lang.CharSequence value) {
    this.companyType = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'statusCompany' field.
   * @return The value of the 'statusCompany' field.
   */
  public java.lang.CharSequence getStatusCompany() {
    return statusCompany;
  }

  /**
   * Sets the value of the 'statusCompany' field.
   * @param value the value to set.
   */
  public void setStatusCompany(java.lang.CharSequence value) {
    this.statusCompany = value;
  }

  /**
   * Creates a new Company RecordBuilder.
   * @return A new Company RecordBuilder
   */
  public static com.activity.dto.Company.Builder newBuilder() {
    return new com.activity.dto.Company.Builder();
  }

  /**
   * Creates a new Company RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Company RecordBuilder
   */
  public static com.activity.dto.Company.Builder newBuilder(com.activity.dto.Company.Builder other) {
    return new com.activity.dto.Company.Builder(other);
  }

  /**
   * Creates a new Company RecordBuilder by copying an existing Company instance.
   * @param other The existing instance to copy.
   * @return A new Company RecordBuilder
   */
  public static com.activity.dto.Company.Builder newBuilder(com.activity.dto.Company other) {
    return new com.activity.dto.Company.Builder(other);
  }

  /**
   * RecordBuilder for Company instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Company>
    implements org.apache.avro.data.RecordBuilder<Company> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence companyName;
    private java.lang.CharSequence companyType;
    private java.lang.CharSequence address;
    private java.lang.CharSequence statusCompany;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.activity.dto.Company.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.companyName)) {
        this.companyName = data().deepCopy(fields()[1].schema(), other.companyName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.companyType)) {
        this.companyType = data().deepCopy(fields()[2].schema(), other.companyType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.statusCompany)) {
        this.statusCompany = data().deepCopy(fields()[4].schema(), other.statusCompany);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Company instance
     * @param other The existing instance to copy.
     */
    private Builder(com.activity.dto.Company other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.companyName)) {
        this.companyName = data().deepCopy(fields()[1].schema(), other.companyName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.companyType)) {
        this.companyType = data().deepCopy(fields()[2].schema(), other.companyType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.statusCompany)) {
        this.statusCompany = data().deepCopy(fields()[4].schema(), other.statusCompany);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'companyName' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompanyName() {
      return companyName;
    }

    /**
      * Sets the value of the 'companyName' field.
      * @param value The value of 'companyName'.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder setCompanyName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.companyName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'companyName' field has been set.
      * @return True if the 'companyName' field has been set, false otherwise.
      */
    public boolean hasCompanyName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'companyName' field.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder clearCompanyName() {
      companyName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'companyType' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompanyType() {
      return companyType;
    }

    /**
      * Sets the value of the 'companyType' field.
      * @param value The value of 'companyType'.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder setCompanyType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.companyType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'companyType' field has been set.
      * @return True if the 'companyType' field has been set, false otherwise.
      */
    public boolean hasCompanyType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'companyType' field.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder clearCompanyType() {
      companyType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.address = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder clearAddress() {
      address = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'statusCompany' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatusCompany() {
      return statusCompany;
    }

    /**
      * Sets the value of the 'statusCompany' field.
      * @param value The value of 'statusCompany'.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder setStatusCompany(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.statusCompany = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'statusCompany' field has been set.
      * @return True if the 'statusCompany' field has been set, false otherwise.
      */
    public boolean hasStatusCompany() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'statusCompany' field.
      * @return This builder.
      */
    public com.activity.dto.Company.Builder clearStatusCompany() {
      statusCompany = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Company build() {
      try {
        Company record = new Company();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.companyName = fieldSetFlags()[1] ? this.companyName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.companyType = fieldSetFlags()[2] ? this.companyType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.address = fieldSetFlags()[3] ? this.address : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.statusCompany = fieldSetFlags()[4] ? this.statusCompany : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Company>
    WRITER$ = (org.apache.avro.io.DatumWriter<Company>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Company>
    READER$ = (org.apache.avro.io.DatumReader<Company>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
